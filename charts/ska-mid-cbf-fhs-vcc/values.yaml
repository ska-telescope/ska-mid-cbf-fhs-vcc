# Default values for ska-mid-cbf HELM chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

display: ":0"
xauthority: "~/.Xauthority"

enabled: true

system: csp
subsystem: fhs-vcc
telescope: SKA-mid

labels:
  app: ska-mid-cbf-fhs-vcc

global:
  minikube: false
  k3d: false
  exposeDatabaseDS: true
  exposeAllDS: false
  tango_host: tango-databaseds-test:10000
  dsconfig:
    image:
      registry: artefact.skao.int
      image: ska-tango-images-tango-dsconfig
      tag: 1.5.13
      pullPolicy: IfNotPresent

midcbf:
  image:
    registry: docker.io/library
    image: ska-mid-cbf-fhs-vcc
    tag: 0.3.0
    pullPolicy: IfNotPresent

resources:
  limits:
    cpu: 500m
    memory: 100Mi
    ephemeral-storage: 512Mi
  requests:
    cpu: 250m
    memory: 50Mi
    ephemeral-storage: 256Mi

nodeSelector: {}

affinity: {}

tolerations: []

hostInfo:
  environment: "minikube"
  hostIP: "127.0.0.1"
  externalPort: 10001
  clusterDomain: cluster.local
  fhsServerId: fhs01
  namespace: "ska-mid-cbf"

bitstreamMountPath: "/app/mnt/bitstream"

bitstreamDownloadJob:
  enabled: True

pvStorageClass: nfss1

# -------------------------------------------------DEVICE SERVER CONFIGURATION -------------------------------------------------

# As defined in fhs-vcc-stack.yaml, the fhs stack and underlying devices are generated dynamically from the following config.
# - `properties` defines a set of properties that are common to all devices in the stack. NOTE: values must be strings.
# - `devices` defines the set of devices contained by every stack.
#    - Each device must contain `name` and `path`.
#    - Each device may optionally define `properties` to pass custom properties.
# - `instances` defines the stacks of devices
# For every property defined in `properties`, the default value can be overridden at the instance or device level.
# For example, if `simulationMode` is defined in `properties`, the property associated with each device will resolve in the following order:
# - `device.simulationMode`, defined in `devices`
# - `instance.simulationMode`, defined in `instances`
# - `simulationMode.default`, defined in `properties` (the global, default value)
# Every string value in name, path, properties, or a instance or device-scoped override, may contain the following placeholder which will be replaced:
#   - `{{.deviceId}}` will be replaced with the device id of the device (deviceId must be defined in either the device or instance)
#   - `{{.deviceId000}}` will be replaced with the device id of the device, padded with zeros
#   - `{{.receptorId}}` will be replaced with the receptor id of the device (calculated by (deviceId - 1) % 3)
#   - `{{.multiplicity}}` will be replaced with index of the iteration in the range of `devices.multiplicity`

# the default tango properties in each device. optionally provide a default, global value
properties:
  deviceId: "{{ .deviceId }}"
  deviceVersionNum: "0.0.1"
  deviceGitlabHash: "0"
  simulationMode: "1"
  emulationMode: "{{ .unitEmulationMode }}"
  emulatorBaseUrl: "ska-mid-cbf-emulators.svc.cluster.local:5001"
  bitstreamPath: "/app/mnt/bitstream"
  bitstreamId: "agilex-vcc"
  bitstreamVersion: "0.1.1"
  emulatorId: "vcc-emulator-{{.deviceId}}"
  emulatorIpBlockId: ""
  firmwareIpBlockId: ""

# the devices in each stack. optionally override any property defined in `properties`. to add extra properties, provide a `properties` dict
deviceCommand: "FhsVccStackDeviceServer"
devices: []

# the VCCAllBandsController device
vccAllBandsDevice:
  name: "VCCAllBandsController"
  path: "fhs/vcc-all-bands/{{.deviceId000}}"
  properties:
    - name: logging_level
      values:
        - "DEBUG"
    - name: ip_blocks
      values:
        Ethernet200Gb:
          emulator_ip_block_id: "ethernet_200g"
          firmware_ip_block_id: "eth200g_{{.receptorId}}"
          ethernet_mode: "200GbE"
          health_monitor_poll_interval: "60"
        B123VccOsppfbChannelizer:
          emulator_ip_block_id: "b123vcc"
          firmware_ip_block_id: "receptor{{.receptorId}}_band123_vcc"
        FrequencySliceSelection:
          emulator_ip_block_id: "fs_selection_26_2_1"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs_selector"
        PacketValidation:
          emulator_ip_block_id: "vcc_pkt_filter"
          firmware_ip_block_id: "packet_validation_unimplemented"
        WidebandFrequencyShifter:
          emulator_ip_block_id: "wideband_frequency_shifter"
          firmware_ip_block_id: "wideband_frequency_shifter_unimplemented"
        WidebandInputBuffer:
          emulator_ip_block_id: "wideband_input_buffer"
          firmware_ip_block_id: "wideband_input_buffer_unimplemented"
          health_monitor_poll_interval: "3"
        VCCStreamMerge1:
          emulator_ip_block_id: "fs1_vcc_stream_merge"
          firmware_ip_block_id: "receptor{{.receptorId}}_vcc_stream_merge1"
        VCCStreamMerge2:
          emulator_ip_block_id: "fs2_vcc_stream_merge"
          firmware_ip_block_id: "receptor{{.receptorId}}_vcc_stream_merge2"
        B123WidebandPowerMeter:
          emulator_ip_block_id: "b123_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_band123_wideband_power_meter"
        B45AWidebandPowerMeter:
          emulator_ip_block_id: "b45a_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_band45a_wideband_power_meter"
        B5BWidebandPowerMeter:
          emulator_ip_block_id: "b5b_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_band5b_wideband_power_meter"
        FS1WidebandPowerMeter:
          emulator_ip_block_id: "fs1_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs1_power_meter"
        FS2WidebandPowerMeter:
          emulator_ip_block_id: "fs2_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs2_power_meter"
        FS3WidebandPowerMeter:
          emulator_ip_block_id: "fs3_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs3_power_meter"
        FS4WidebandPowerMeter:
          emulator_ip_block_id: "fs4_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs4_power_meter"
        FS5WidebandPowerMeter:
          emulator_ip_block_id: "fs5_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs5_power_meter"
        FS6WidebandPowerMeter:
          emulator_ip_block_id: "fs6_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs6_power_meter"
        FS7WidebandPowerMeter:
          emulator_ip_block_id: "fs7_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs7_power_meter"
        FS8WidebandPowerMeter:
          emulator_ip_block_id: "fs8_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs8_power_meter"
        FS9WidebandPowerMeter:
          emulator_ip_block_id: "fs9_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs9_power_meter"
        FS10WidebandPowerMeter:
          emulator_ip_block_id: "fs10_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs10_power_meter"
        FS11WidebandPowerMeter:
          emulator_ip_block_id: "fs11_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs11_power_meter"
        FS12WidebandPowerMeter:
          emulator_ip_block_id: "fs12_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs12_power_meter"
        FS13WidebandPowerMeter:
          emulator_ip_block_id: "fs13_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs13_power_meter"
        FS14WidebandPowerMeter:
          emulator_ip_block_id: "fs14_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs14_power_meter"
        FS15WidebandPowerMeter:
          emulator_ip_block_id: "fs15_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs15_power_meter"
        FS16WidebandPowerMeter:
          emulator_ip_block_id: "fs16_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs16_power_meter"
        FS17WidebandPowerMeter:
          emulator_ip_block_id: "fs17_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs17_power_meter"
        FS18WidebandPowerMeter:
          emulator_ip_block_id: "fs18_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs18_power_meter"
        FS19WidebandPowerMeter:
          emulator_ip_block_id: "fs19_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs19_power_meter"
        FS20WidebandPowerMeter:
          emulator_ip_block_id: "fs20_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs20_power_meter"
        FS21WidebandPowerMeter:
          emulator_ip_block_id: "fs21_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs21_power_meter"
        FS22WidebandPowerMeter:
          emulator_ip_block_id: "fs22_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs22_power_meter"
        FS23WidebandPowerMeter:
          emulator_ip_block_id: "fs23_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs23_power_meter"
        FS24WidebandPowerMeter:
          emulator_ip_block_id: "fs24_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs24_power_meter"
        FS25WidebandPowerMeter:
          emulator_ip_block_id: "fs25_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs25_power_meter"
        FS26WidebandPowerMeter:
          emulator_ip_block_id: "fs26_wideband_power_meter"
          firmware_ip_block_id: "receptor{{.receptorId}}_fs26_power_meter"
    - name: network_switch_id
      values:
        - "{{ .networkSwitchId }}"
    - name: bmc_endpoint_id
      values:
        - "{{ .bmcEndpointIp }}"
    - name: unit_number
      values:
        - "{{ .unitNum }}"
    - name: fpga_number
      values:
        - "{{ .fpgaNum }}"

# the top-level stacks, one for every device id. optionally override any property defined in `properties` (if it hasn't been overridden at the device level)
VCCUnits:
  - unitNum: 1
    emulationMode: "0"
    networkSwitchId: "127.0.0.1"
    bmcEndpointIp: "127.0.1.1"
    instancesRange: [1, 2]
  # - unitNum: 2
  #   emulationMode: "1"
  #   networkSwitchId: "127.0.0.2"
  #   bmcEndpointIp: "127.0.1.2"
  #   instancesRange: [7, 12]


# --- DEVICE SERVER SIMULATION --- #

# Simulators
# set simulated to true to deploy VCCAllBandsController simulators
standaloneSimulator: false
simDeviceCommand: "SimVCCAllBandsController"
